// vi: set ft=javascript :

function tsc(srcEntry, outDir) {
    return [
        'tsc ' + srcEntry,
        '--noImplicitAny',
        '--noEmitOnError',
        '--module commonjs',
        '--outDir ' + outDir
    ].join(' ');
}

function npmInstallG(name) { return 'sudo npm install -g ' + name; }
function browserify(entryPoint, output) { return 'browserify ' + entryPoint + ' -o ' + output; }

function removeJsInDir(dir) {
    jake.readdirR(dir)
        .filter(function (f) { return /\.js$/.test(f); })
        .forEach(jake.rmRf);
}

var src = {
        dir: 'src',
        bin: 'bin',
        obj: 'obj',
        files: new jake.FileList().include('src/*.ts').toArray(),
        main: 'src/main.ts',
        index: 'src/index.html',
        output: 'bin/montgomery.js',
    },
    test = {
        dir: 'test',
        obj: 'test/obj',
        files: new jake.FileList().include('test/*.ts').toArray(),
        canary: 'test/canary',
    };

directory(src.bin);
directory(src.obj);
directory(test.obj);

desc('Install dependencies');
task('dependencies', function () {
    jake.exec([
        npmInstallG('typescript'),
        npmInstallG('tsd'),
        npmInstallG('typescript-tools'),
        npmInstallG('browserify'),
        'npm install',
        'tsd reinstall --save',
    ], {
        printStdout: true,
        printStderr: true
    });
});

desc('Compile sources');
file(src.output, [ src.bin, src.obj ].concat(src.files), { async: true }, function () {
    jake.exec([
        tsc(src.main, src.obj),
        browserify(src.obj + '/main.js', src.output)
    ], {
        printStdout: true,
        printStderr: true
    }, complete);
});

desc('Build main application');
task('default', [ src.output ], function () {
    jake.cpR(src.index, src.bin);
});

desc('Compile tests');
file(test.canary, [ test.obj ].concat(test.files), { async: true }, function () {
    var cmds = test.files
        .map(function (f) {
            return tsc(f, test.obj);
        })
        .concat([ 'touch ' + test.canary ]);
    jake.exec(cmds, {
        printStdout: true,
        printStderr: true
    }, complete);
});

desc('Run tests');
testTask('main application', [ test.canary ], function () {
    this.testFiles.include(test.obj + '/test/*.js');
    this.testFiles.exclude(test.obj + '/test/*x.js');
});

desc('Clean')
task('clean', function () {
    jake.rmRf(src.bin);
    jake.rmRf(src.obj);
    jake.rmRf(test.canary);
    jake.rmRf(test.obj);
    jake.rmRf('npm-debug.log');
    removeJsInDir(src.dir);
    removeJsInDir(test.dir);
});
